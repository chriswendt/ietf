<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7515 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc strict="yes" ?>
<?rfc toc="yes" ?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc rfcedstyle="no" ?>
<?rfc iprnotified="no" ?>
<?rfc colonspace="yes" ?>
<rfc category="std" docName="draft-wendt-modern-drip-00" ipr="trust200902">

 <front>
   <title abbrev="DRiP">Distributed Registry Protocol</title>

   <author fullname="Harsha Bellur" initials="H." surname="Bellur">
     <organization>Comcast</organization>

     <address>
       <postal>
         <street>One Comcast Center</street>
         <city>Philadelphia</city>
         <region>PA</region>
         <code>19103</code>
         <country>USA</country>
       </postal>
       <email>Harsha_Bellur@cable.comcast.com</email>
     </address>
   </author>

   <author fullname="Chris Wendt" initials="C." surname="Wendt" role="editor">
     <organization>Comcast</organization>

     <address>
       <postal>
         <street>One Comcast Center</street>
         <city>Philadelphia</city>
         <region>PA</region>
         <code>19103</code>
         <country>USA</country>
       </postal>
       <email>chris-ietf@chriswendt.net</email>
     </address>
   </author>

   <date month="October" year="2015" />

   <area>ART</area>

   <workgroup>Internet Engineering Task Force</workgroup>

   <keyword></keyword>

   <abstract>
     <t>This document describes a protocol for allowing a distributed set of nodes to synchronize a set of information in real-time with minimal amount of delay.  This is useful for registry types of information like identity and telephone numbers with associated routing and ownership information, although could be extended to support other distributed real-time information updates as well.</t>
   </abstract>
 </front>

 <middle>
   <section title="Introduction">
     <t>This document describes the Distributed Registry Protocol (DRiP).  DRiP defines a set of peer protocols for how an arbitrary number of nodes arranged in a distributed mesh architecture can be used to synchronize data in real-time across a network.</t>
     
     <section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>
         
        <t>Initiator Node - A node that initiates data propagation.</t>
        <t>Receiver Node - A node that receives the propagated data.</t>
           
   	 </section>
   </section>
     
   <section title="DRiP Overview" anchor="drip_overview">
     <t>DRiP uses a mix of Gossip protocol for distribution of entries with the addition of a voting system to avoid race conditions on writing of entries.</t>
   </section>
       
   <section title="Distributed MESH Architecture" anchor="distributed_mesh_architecture">
     <t>The DRiP architecture is based on a peer-to-peer communication model where a given node associated with a data store is not necessarily aware of the total number of nodes in the entire network. Minimally, every node should reachable by at least one multi-node path from every other node. Each node in the DRiP network maintains a list of peer nodes from which it receives and transmits updates. Information is propagated by forwarding to it's peer nodes until the information received by a node has already been received.</t>
     <figure align="center" anchor="figure_distributed_mesh_architecture">
       <artwork align="left"> <![CDATA[
 ___           ___                         ___           ___ 
|DB |_________|DB |                       |DB |_________|DB |
|___|         |___|                       |___|         |___|
  |   Data      |                           |   Data      |  
  |   Store     |                           |   Store     |  
 _|_  Cluster  _|_                         _|_  Cluster  _|_ 
|DB |_________|DB |                       |DB |_________|DB |
|___|         |___|                       |___|         |___|
                  \                       /
                   \                     /
                   _\___     DRIP     _ /__
                  |Node |------------|Node |
                  |  A  |    HTTPS   |  C  |
                  |_____|            |_____|
                      \H           H/
                      D\T         T/D
                       R\T       P/R 
                        I\P     P/I  
                         P\S   S/P   
                         __\__ /   DRIP     _____  
                        |Node |------------|Node |
                        |  B  |   HTTPS    |  D  |
                        |_____|            |_____|
                       /                   /
    ___           ___ /                 __/_          ___ 
   |DB |_________|DB |                 |DB |_________|DB |
   |___|         |___|                 |___|         |___|
     |   Data      |                     |   Data      |  
     |   Store     |                     |   Store     |  
    _|_  Cluster  _|_                   _|_  Cluster  _|_ 
   |DB |_________|DB |                 |DB |_________|DB |
   |___|         |___|                 |___|         |___|
       ]]></artwork>
       <postamble>Distributed Mesh Architecture</postamble>
     </figure>
   </section>
   <section title="DRiP procedures" anchor="drip_procedures">
     <section title="Entry Entitlement Verification" anchor="entry_entitlement_verification">
       <t>When a node owner would like to create or modify a set of information, generally in the context of a registry, there MAY be a verification procedure that an entry can be created.  This could include validating whether an entry is entitled to be written or modified in the first place.  For example, identity or telephone number ownership or porting.  The exact mechanics of this are out of scope of this document and are generally application specific.</t>
     </section>
     <section title="Custom HTTP header fields" anchor="custom_http_header_fields">
       <t>Custom HTTP header fields will be used to carry Node specific information.</t>
       <texttable title="DRiP HTTP Headers" anchor="table_custom_http_header_fields">
         <ttcol align="center" width="30%">Field Name</ttcol>
         <ttcol align="left" width="70%">Description</ttcol>
         <c>DRiP-Node-ID</c>
         <c>Each node in the mesh MUST have a unique identifier. An Initiator node MUST set its own node ID as the field value. A Receiver Node MUST NOT change the DRiP-Node-ID field value in the HTTPS request as it is propagated to its peer nodes (nodes it is aware of).</c>
         <c>DRiP-Node-Counter</c>
         <c>Every node maintains a count of the number of times it initiates key-value data propagation. This counter MUST be an unsigned type, typically, a 64 bit integer. The Initiator node MUST set this count as the field value. The Non-Initiator node MUST NOT change the DRiP-Node-Counter field value in the HTTPS request as it is propagated to its peer nodes (nodes it is aware of).</c>
         <c>DRiP-Node-Counter-reset</c>
         <c>A node can reset the count (to zero) of the number of times it initiates key-value data propagation. If the counter value is reset, prior to initiating data propagation, then this field value MUST be set to true. Otherwise, it MUST be set to false, at all times. A typical use case to reset the counter value is when the counter (of unsigned type) value wraps around. The Initiator node MUST set this field value to either true or false. The Non-Initiator node MUST NOT change the DRiP-Node-Counter-reset field value in the HTTPS request as it is propagated to its peer nodes (nodes it is aware of).</c>
         <c>DRiP-Transaction-Type</c>
         <c>The Initiator node MUST set this field value to be either real-time update, periodic sync or sync on demand. See section 3.4. The Non-Initiator node MUST NOT change the DRiP-Transaction-Type field value in the HTTPS request as it is propagated to its peer nodes (nodes it is aware of).</c>
         <c>DRiP-Sync-Complete</c>
         <c>During periodic sync or sync on demand transaction type, the Initiator node MUST set this field value to be true, if no more data is left to be propagated. Otherwise, this field value MUST be set to false. The Non-Initiator node MUST NOT change the DRiP-Sync-Complete field value in the HTTPS request as it is propagated to its peer nodes (nodes it is aware of).</c>
       </texttable>
     </section>
     <section title="Data Propagation Rules" anchor="data_propagation_rules">
       <t>A node propagates key-value data to all its peer nodes except the the node from which it received data. For example, in Figure 1, when node B receives data from node A, it will propagate the data received to nodes C and D but not back to node A.</t>
       <t>For each transaction type (real-time update, periodic sync or sync on demand), the following action MUST take place when a node receives a HTTPS request with propagated data</t>
       <t>
         <list style="symbols">
           <t>If DRiP-Node-ID field value (in the HTTP header) contains Initiator node ID that has never been seen, both DRiP-Node-ID and DRiP-Node-Counter field values MUST be stored for future reference and the data is propagated to all peer nodes.</t>
           <t>If DRiP-Node-ID field value ((in the HTTP header) matches with a stored node ID and DRiP-Node-Counter-reset field value is false</t>
           <t>The received data MUST be propagated to the peer nodes if DRiP-Node-Counter field value is greater than the saved counter value. The DRiP-Node-Counter field value MUST be saved as the new counter for the stored node ID.</t>
           <t>If DRiP-Node-Counter field value is less than or equal to saved counter value, then no action is necessary (data MUST NOT be propagated to peer nodes). This ensures that data propagation stops when all nodes have received data from the Initiator node.</t>
           <t>If DRiP-Node-ID field value matches with a stored node ID and DRiP-Node-Counter-reset field value is true</t>
           <t>The received data MUST be propagated to the peer nodes. The DRiP-Node-Counter field value MUST be saved as the new counter for the stored node ID.</t>
         </list>
       </t>
     </section>
     <section title="Transaction Types" anchor="transaction_types">
       <section title="Real-Time Updates" anchor="real_time_updates">
         <t>When the Initiator node has data to provision, the update is propagated to its peers immediately to provide timely updates of information. Section 3.5 details the steps involved in a real-time update.</t>
         <section title="State Diagram" anchor="real_time_updates_state_diagram">
           <figure align="center" anchor="figure_real_time_updates_state_diagram">
             <artwork align="center"> <![CDATA[
                            _________ 
   ----------------------->|         |
  |                        | Waiting |
  |                        | For     |
  |   ---------------------| Events  |
  |  |                     |_________|
  |  |(Real-Time Update,               
  |  | Start Timer)         --------------------------------------  
  |  |                     |         Real-Time Updates,           |
  |  |                     |         Synchronization              |
  |  |             ________|_______  From Peer Nodes              |
  |  |            |                | If key matches an in-progress|
  |   ------------|                |  real-time update            |
  |               | Waiting For    |  vote "NO".                  |
  |               | Response From  |  Otherwise, vote "YES".      |
  |               | Peer Nodes     |<------------------------------ 
  |               |                |                                
  |               |                |                                
  |           ----|                |----                            
  |  Timer   |    |________________|    |                           
  |  Expired |                          | Received Votes
  |          |                          | From All Peer 
  |          |                          | Nodes         
  |          |      _______________     |
  |          |    |                |    |
  |          |    |                |    |
  |           --->|                |<---
  |               |  Validating    |    
  | (If all Votes |  Votes         |    
  |  are "YES",   |                |    
  | propagate     |                |        
  | commit)       |                |        
   ---------------|________________|        
             ]]></artwork>
           </figure>
         </section>
       </section>
       <section title="Periodic Full Synchronization" anchor="periodic_full_synchronization">
         <t>For maximum reliability and validation of information contained in the distributed registry, periodically, a node SHOULD propagate all of the entries of information to its peers. In practice, this could be done in low traffic times or other convenient times that would have less chance to slow down any concurrent real-time updates being processed. The two phase commit described in Section 3.5 applies for full synchronization. Conflict handling during full synchronization is TBD.</t>
       </section>
       <section title="Full Synchronization On Demand" anchor="full_synchronization_on_demand">
         <t>A node, either newly added to the mesh or re-activated after being out of service due to network issues or other anomalies, will inform its peer nodes to add this node to their list of peer nodes. The resulting action from the peer nodes is to start synchronizing data from their respective data stores. The two phase commit does NOT apply here as the contents of the nodes's data store is either outdated or empty. During this phase (HTTPS requests received will have DRiP-Sync-Complete field value set to false), this node SHOULD NOT become an Initiator node to provision data. While this transaction is going on, the peer nodes MUST NOT propagate real-time updates or periodic full synchronization transaction types. The next cycle of periodic synchronization will resolve discrepancy, if any, in data contained in this node's data store.</t>
         <section title="REST API" anchor="full_synchronization_on_demand_rest_api">
           <t>PUT /addnode/node/:nodeid</t>
         </section>
       </section>
     </section>
     <section title="Two Phase Commit" anchor="two_phase_commit">
       <section title="Voting Phase" anchor="voting_phase">
         <t>The Initiator node sets a timeout period to get response from its peer nodes, for data propagated. This response (see section 4.5.1.2) will indicate a "vote" for whether the transaction can be completed based on any conflicting updates to the same entry. If all peer nodes vote "yes", then a commit of the information to the local node is initiated. If any one of the peer nodes votes "no" or if there is no response from one or more peer nodes, then the commit of the information MUST not be completed. No action is taken for responses (see section 4.5.1.2) received after the timeout period.</t>
         <figure align="center" anchor="figure_voting_phase">
           <artwork align="center"> <![CDATA[
   ___           ___      ___           ___      ___           ___ 
  |DB |_________|DB |    |DB |_________|DB |    |DB |_________|DB |
  |___|         |___|    |___|         |___|    |___|         |___|
    |   Data      |        |   Data      |        |   Data      |  
    |   Store     |        |   Store     |        |   Store     |  
   _|_  Cluster  _|_      _|_  Cluster  _|_      _|_  Cluster  _|_ 
  |DB |_________|DB |    |DB |_________|DB |    |DB |_________|DB |
  |___|         |___|    |___|         |___|    |___|         |___|
      \                     \                      |
       \                     \                     |
       _\___    Vote(HTTPS)  _\___    Vote(HTTPS)  |____
      |Node |  <----------  |Node |  ---------->  |Node |
      |  B  |---------------|  A  |---------------|  C  |
      |_____|  ---------->  |_____|  <----------  |_____|
                 Yes/No                Yes/No     
           ]]></artwork>
           <postamble>Voting Phase</postamble>
         </figure>
         <t>The peer nodes known to the originating node will continue propagate the information to their peer nodes and so on. However, these peer nodes will no longer need to keep track of the time interval for responses. A node will stop continuing to propagate information when it determines it has received the same information again. This can be determined by keeping track of the counter and originating node id.</t>
         <section title="REST API" anchor="two_phase_commit_rest_api">
           <section title="POST /voting">
             <t>Example (using cURL)</t>
             <t>Request</t>
             <figure>
               <artwork> <![CDATA[
     $ curl -i -H "Content-Type: application/json" -H "DRiP-Node-ID: 
         nodeA" -H "DRiP-Node-Counter: 1234" -H "DRiP-Node-Counter-reset: 
         false" -X POST -d '{"publicID":"+12155551212","service":"pstn",
         "routingID":+12155551212@pstn.comcast.com, "timestamp":
         "1422980496943" }' https:// nodebregistry.com/voting
             ]]></artwork>
             </figure>
             <t>Response</t>
             <figure>
               <artwork> <![CDATA[
     HTTP/1.1 200 OK
             ]]></artwork>
             </figure>
           </section>
           <section title="POST /votingphase/node/:nodeid/response/:response">
             <t>Example (using cURL)</t>
             <t>Request</t>
             <figure>
               <artwork> <![CDATA[               
     $ curl -i -X POST http://nodearegistry.com/node/nodeA/response/yes
               ]]></artwork>
             </figure>
             <t>Response</t>
             <figure>
               <artwork> <![CDATA[
     HTTP/1.1 200 OK
               ]]></artwork>
             </figure>
           </section>
         </section>
       </section>
     </section>
     <section title="Commit Phase" anchor="commit_phase">
       <t>The Initiator node upon receiving a "yes" from all the peer registries, the registry that originated the gossip will now commit the data in the HTTPS request payload to its data store. Subsequently, this information is propagated to all the nodes so that each node in the mesh will commit the same information in to their respective data stores.</t>
       <figure align="center" anchor="figure_commit_phase">
         <artwork align="center"> <![CDATA[
   ___           ___                         ___           ___ 
  |DB |_________|DB |                       |DB |_________|DB |
  |___|         |___|                       |___|         |___|
    |   Data      |                           |   Data      |  
    |   Store     |                           |   Store     |  
   _|_  Cluster  _|_                         _|_  Cluster  _|_ 
  |DB |_________|DB |                       |DB |_________|DB |
  |___|         |___|                       |___|         |___|
                    \                       /
                     \COMMIT               /COMMIT
                     _\___     COMMIT   _ /__
                    |Node |------------|Node |
                    |  A  |    HTTPS   |  C  |
                    |_____|            |_____|
                        \H           H/
                         \T         T/
                    COMMIT\T       P/COMMIT 
                           \P     P/  
                            \S   S/   
                           __\__ /  COMMIT    _____  
                          |Node |------------|Node |
                          |  B  |   HTTPS    |  D  |
                          |_____|            |_____|
                         /                   /
                        /COMMIT             /COMMIT
      ___           ___/                  _/__          ___ 
     |DB |_________|DB |                 |DB |_________|DB |
     |___|         |___|                 |___|         |___|
       |   Data      |                     |   Data      |  
       |   Store     |                     |   Store     |  
      _|_  Cluster  _|_                   _|_  Cluster  _|_ 
     |DB |_________|DB |                 |DB |_________|DB |
     |___|         |___|                 |___|         |___|
   
         ]]></artwork>
         <postamble>Commit Phase</postamble>
       </figure>
       <section title="REST API">
         <section title="POST /commit">
           <t>Example (using cURL)</t>
           <t>Request</t>
           <figure>
             <artwork> <![CDATA[
  $ curl -i -H "Content-Type: application/json" -H "DRiP-Node-ID: 
     nodeA" -H "DRiP-Node-Counter: 1234" -H 
     "DRiP-Node-Counter-reset: false" -X POST -d
     '{"publicID":"+12155551212","service":"pstn","routingID":
     +12155551212@pstn.comcast.com, "timestamp":"1422980496943"}' 
     https:// nodebregistry.com/commit
           ]]></artwork>
           </figure>
           <t>Response</t>
           <figure>
             <artwork> <![CDATA[
   HTTP/1.1 200 OK
             ]]></artwork>
           </figure>
         </section>
       </section>
     </section>
   </section>
   <section title="Security Considerations">
     <section title="HTTPS">
       <t>All nodes MUST perform HTTP transactions using TLS.</t>
     </section>
     <section title="Authentication">
       <t>Secure authentication of node to node communication is beyond the scope of this document, however best practices in terms of protecting the node API interface should be followed.</t>
     </section>
   </section>
 </middle>
 
 <back>
   <references title="References">
     <reference anchor="RFC2119" target="http://www.rfc-editor.org/info/rfc2119">
       <front>
         <title>
         Key words for use in RFCs to Indicate Requirement Levels
         </title>
         <author initials="S." surname="Bradner" fullname="S. Bradner">
           <organization/>
         </author>
         <date year="1997" month="March"/>
       </front>
       <seriesInfo name="BCP" value="14"/>
       <seriesInfo name="RFC" value="2119"/>
       <seriesInfo name="DOI" value="10.17487/RFC2119"/>
     </reference>
   </references>
 </back>
</rfc>