Internet Engineering Task Force                            C. Wendt, Ed.
Internet-Draft                                                   Comcast
Intended status: Informational                        September 15, 2015
Expires: March 18, 2016


         Secure HAndling of verifiable information using toKENs
                         draft-wendt-shaken-00

Abstract

   This memo defines a mechanism for securing verifiable information
   where an originator needs to prove to the terminating party that the
   information can be cryptographically proven was sent by the
   originator.  This verified information could include network
   identity, device identity, realm of origin, and other metadata that
   could cross both trusted and likely untrusted or unknown points in
   the network.  Verification of this information in the telephony world
   is important for securing telephone calls end-to-end and can be
   utilized as an important tool for combat spoofing of identity and
   other forms of impersonation.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 18, 2016.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction
     1.1.  Conventions used in this document
   2.  Overview
     2.1.  Trust Framework Overview
     2.2.  Token Overview
     2.3.  Key Management Overview
     2.4.  Key Distribution Overview
   3.  Verify Token (VT)
     3.1.  Token Claim
     3.2.  Token Signature
   4.  Acknowledgements
   5.  IANA Considerations
   6.  Security Considerations
   7.  Normative References
   Appendix A.  Example Tokens
   Author's Address

1.  Introduction

   This document will define a method for the creation and verification
   of an extensible canonical token that cryptographically represents a
   particular set of information, originator the information, and can
   chain the originator to a trust anchor.  A goal of this approach is
   to be implementable in a straight-forward and evolutionary way.  A
   second goal is to be separable from any specific signaling call
   logic, so creation and verification of information can be implemented
   in a flexible way with minimal dependence on specific signaling
   constructs.  A third goal is to utilize as much as possible existing
   technologies and infrastructure to allow a shorter path to adoption.

1.1.  Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

2.  Overview

   SHAKEN specifically defines both the use of tokens and a practical
   framework for managing keys and certificates with limited chain of
   trust.  This framework assumes there is a centralized trust agent who
   has a very limited chain of trust, i.e. single link, and is
   intentionally linked to the originator of the information represented
   by a unique realm or domain, typically associated with a public
   domain owned by the originator.

2.1.  Trust Framework Overview

   SHAKEN uses the X.509 certificate framework and the concepts of a
   trust anchor and certificate chain.  The trust anchor is represented
   by the party that can authorize those that can originating and/or
   verify a set of information that is signed by a digital signature
   linked to a certificate chain back to the trust anchor.  For the
   applications SHAKEN is targeted, this is typically a limited
   community where direct trust relationships is manageable.  Therefore,
   the preferred scenario is that a certificate chain only has a single
   chain from participating parties to the trust anchor.

2.2.  Token Overview

   Tokens are a convenient way of encapsulating information with
   associated cryptographic signatures.  They are used in many
   applications that require authentication, authorization, encryption
   and other use cases that involve digital signatures.  JWT RFC 7519
   [RFC7519] and JWS RFC 7515 [RFC7515] are designed to provide a
   compact form for many of these purposes and define a specific form
   for specifying information associated with the token and an
   extensible mechanisms for applying digital signatures and the
   cryptographic algorithms used.  JWT has the form
   "header.claim.signature" and JWS provides standard ways to form a
   digital signature.  Note: In this document, we will focus on digital
   signatures, but JWT and JWS also support HMAC symmetric key based
   algorithms as well.

2.3.  Key Management Overview

   Security and key management in the SHAKEN framework is guided by
   X.509 certificate management.  Parties that would like to originate
   information as an authorized participant will generate a certificate
   signing request (CSR) to the trust anchor.  This CSR will define the
   Distinguished Name (DN) to be a fully qualified domain name.  In most
   cases, this fully qualified domain name SHOULD correspond directly to
   and is owned by the party as part of the internet DNS.  This has much
   to do with how the public key certificate should be distributed to
   all participants.

   The authorized participant will use the resulting public/private key
   pair and certificate chain to sign the SHAKEN tokens, thus
   cryptographically associating the token to the originator.  The
   SHAKEN token will contain a URI for accessing the public key
   certificate that can be used for validation of the signature and
   therefore verification of the information and the originator.

   The use of a trust anchor and certificate chain is highly
   recommended, however in the case of private deployments or for the
   case where trust anchor has not been established within a given
   system, certificate chaining does not need to be used, or could be
   integrated at a later point.  X.509 and the signing mechanisms built
   into the token will be able to signal the certificate chain
   dependency.  This flexibility also allows for future needs for
   evolution of the security needed, for example, intermediate trust
   anchors, or other X.509 supported mechanisms.

2.4.  Key Distribution Overview

   In order to facilitate ease of distribution of public key
   certificates, particularly for the applications that SHAKEN is
   targeted where there is a limited number of authorized participants,
   a number of mechanisms are suggested.  These include:

   o  sharing of public keys - participants share keys directly

   o  registry or distributed registry - participants share keys through
      a centralized or distributed registry

   o  Public or Private DNS - participants share keys in DNSKEY RR for
      domain corresponding to realm used for certificate [TODO - should
      address DNS spoofing via DNSSEC]

   o  HTTP well known - participants share keys via HTTP using well know
      URI for domain corresponding to realm used for certificate (TODO:
      should address DNS spoofing via DNSSEC)

3.  Verify Token (VT)

   The Verify Token (VT) is constructed based on JWT [RFC7519] and JWS
   [RFC7515] specifications.

   The token header is a JOSE header.  An example of the header for the
   case of a symmetric key HMAC SHA-256 would be the following,

           {"typ":"JWT",
            "alg":"RS256"}

   This represents the fact that the encoded token is a JWT, and the JWT
   is a JWS using the HMAC SHA-256 algorithm.  Other likely algorithms
   used for the PAI token parameter would include signatures using a
   X.509 certificate chain.  This header is Base64url encoded per JWT
   specification.

3.1.  Token Claim

   The token claim should consist of the protected information.  For the
   PAI parameter token, the header MUST include the calling number and
   the realm of origin.  In addition, the claim should include a "jti",
   JWT ID, for a unique identifier for the JWT.  The purpose of this
   "jti" claim is to prevent the JWT from being replayed.

   An example claim is as follows,

    { "tel":"+12155551212",
      "realm":"tel.comcast.net",
      "jti":" 710b962e-041c-11e1-9234-0123456789ab" }
    "tel" is the claimed caller-id in e.164 format
    "realm" is the domain associated with the originating SIP service provider
    "jti" is a UUID as defined in RFC4122

3.2.  Token Signature

4.  Acknowledgements

   Would like to thank members of the ATIS and SIP Forum NNI Task Group
   for feedback encouragement particularly ...

5.  IANA Considerations

   This memo includes no request to IANA.

6.  Security Considerations

   Security Considerations

7.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <http://www.rfc-editor.org/info/rfc7515>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <http://www.rfc-editor.org/info/rfc7519>.

Appendix A.  Example Tokens

   Provide some example tokens

Author's Address

   Chris Wendt (editor)
   Comcast
   One Comcast Center
   Philadelphia, PA
   US

   Phone: +1-215-286-7093
   Email: chris_wendt@cable.comcast.com
