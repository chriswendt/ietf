<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.36 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-stir-passport-09" category="std">

  <front>
    <title abbrev="PASSporT">Personal Assertion Token (PASSporT)</title>

    <author initials="C." surname="Wendt" fullname="Chris Wendt">
      <organization>Comcast</organization>
      <address>
        <postal>
          <street>One Comcast Center</street>
          <city>Philadelphia, PA  19103</city>
          <country>USA</country>
        </postal>
        <email>chris-ietf@chriswendt.net</email>
      </address>
    </author>
    <author initials="J." surname="Peterson" fullname="Jon Peterson">
      <organization>Neustar Inc.</organization>
      <address>
        <postal>
          <street>1800 Sutter St Suite 570</street>
          <city>Concord, CA  94520</city>
          <country>US</country>
        </postal>
        <email>jon.peterson@neustar.biz</email>
      </address>
    </author>

    <date year="2016" month="October" day="17"/>

    <area>ART</area>
    <workgroup>STIR</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a method for creating and validating a token that cryptographically verifies an originating identity, or more generally a URI or telephone number representing the originator of personal communications. The PASSporT token is cryptographically signed to protect the integrity of the identity the originator and to verify the assertion of the identity information at the destination. The cryptographic signature is defined with the intention that it can confidently verify the originating persona even when the signature is sent to the destination party over an insecure channel. PASSporT is particularly useful for many personal communications applications over IP networks and other multi-hop interconnection scenarios where the originating and destination parties may not have a direct trusted relationship.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In today’s IP-enabled telecommunications world, there is a growing concern about the ability to trust incoming invitations for communications sessions, including video, voice and messaging <xref target="RFC7340"/>. As an example, modern telephone networks provide the ability to spoof the calling party telephone number for many legitimate purposes including providing network features and services on the behalf of a legitimate telephone number. However, as we have seen, bad actors have taken advantage of this ability for illegitimate and fraudulent purposes meant to trick telephone users to believe they are someone they are not. This problem can be extended to many emerging forms of personal communications.</t>

<t>This document defines a method for creating and validating a token that cryptographically verifies an originating identity, or more generally a URI or telephone number representing the originator of personal communications. Through extensions defined in this document, in <xref target="extending_passport"/>, other information relevant to the personal communications can also be added to the token. The goal of PASSporT is to provide a common framework for signing originating identity related information in an extensible way. Additionally, this functionality is independent of any specific personal communications signaling call logic, so that the assertion of originating identity related information can be implemented in a flexible way and can be used in applications including end-to-end applications that require different signaling protocols or gateways between different communications systems. It is anticipated that signaling protocol specific guidance will be provided in other related documents and specifications to specify how to use and transport PASSporT tokens, however this is intentionally out of scope for this document.</t>

<t><xref target="I-D.ietf-stir-rfc4474bis"/> provides details of the use of PASSporT within SIP <xref target="RFC3261"/> signaling protocol for the signing and verification of telephone numbers and SIP URIs.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.</t>

</section>
<section anchor="passport_token_overview" title="PASSporT Token Overview">

<t>JSON Web Token (JWT) <xref target="RFC7519"/> and JSON Web Signature (JWS) <xref target="RFC7515"/> and related specifications define a standard token format that can be used as a way of encapsulating claimed or asserted information with an associated digital signature using X.509 based certificates. JWT provides a set of claims in JSON format that can conveniently accommodate asserted originating identity information and is easily extensible for extension mechanisms defined below. Additionally, JWS provides a path for updating methods and cryptographic algorithms used for the associated digital signatures.</t>

<t>JWS defines the use of JSON data structures in a specified canonical format for signing data corresponding to JOSE header, JWS Payload, and JWS Signature. JWT defines a set of claims that are represented by specified JSON objects which can be extended with custom keys for specific applications. The next sections define the header and claims that MUST be minimally used with JWT and JWS for PASSporT.</t>

<t>PASSporT specifically uses this token format and defines claims that convey the identity of the origination and destination of personal communications.  The originating identity, the primary value asserted in a PASSporT object represents the identity of the calling party or the initiator of a personal communications session.  The signer of a PASSporT object may or may not correspond to the origination identity. For a given application’s use or using protocol of PASSporT the creation of the PASSporT object is performed by an entity that is authoritative to assert the callers identity. This authority is represented by the certificate credentials and the signature and PASSporT object is created and initiated to the destination(s) at the applications choice of authoritative point(s) in the network. For example, the PASSporT object could be created at a device that has authenticated with a user, or at a network entity with an authenticated trust relationship with that device and it’s user. Destination identities represent the intended destination of the personal communications, i.e. the identity(s) being called by the caller. The destination point(s) determined by the application need to have the capability to verify the PASSporT token and the digital signature. The PASSporT associated certificate is used to validate the authority of the originating signer, generally via a certificate chain to the trust anchor for that application.</t>

</section>
<section anchor="passport_header" title="PASSporT Header">

<t>The JWS token header is a JOSE header, <xref target="RFC7515"/> Section 4, that defines the type and encryption algorithm used in the token.</t>

<t>PASSporT header should include, at a minimum, the header parameters defined in the next three subsections.</t>

<section anchor="typ-type-header-parameter" title="“typ” (Type) Header Parameter">

<t>The “typ” (Type) Header Parameter is defined in JWS <xref target="RFC7515"/> Section 4.1.9. to declare the media type of the complete JWS.</t>

<t>For PASSporT Token the “typ” header MUST be the string “passport”. This represents that the encoded token is a JWT of type passport.</t>

</section>
<section anchor="alg-algorithm-header-parameter" title="“alg” (Algorithm) Header Parameter">

<t>The “alg” (Algorithm) Header Parameter is defined in JWS <xref target="RFC7515"/> Section 4.1.1. This definition includes the ability to specify the use of a cryptographic algorithm for the signature part of the JWS. It also refers to a list of defined “alg” values as part of a registry established by JSON Web Algorithms (JWA) <xref target="RFC7518"/> Section 3.1.</t>

<t>For the creation and verification of PASSporT tokens and their digital signatures, implementations MUST support ES256 as defined in JWA <xref target="RFC7518"/> Section 3.4. Implementations MAY support other algorithms registered in the JSON Web Signature and Encryption Algorithms registry created by <xref target="RFC7518"/>. The contents of that registry may be updated in the future depending on cryptographic strength requirements guided by current security best practice. The mandatory-to-support algorithm for PASSporT tokens may likewise be updated in future updates to this document.</t>

</section>
<section anchor="x5u-x509-url-header-parameter" title="“x5u” (X.509 URL) Header Parameter">

<t>As defined in JWS <xref target="RFC7515"/> Section 4.1.5., the “x5u” header parameter defines a URI <xref target="RFC3986"/> referring to the resource for the X.509 public key certificate or certificate chain <xref target="RFC5280"/> corresponding to the key used to digitally sign the JWS. Generally, as defined in JWS <xref target="RFC7515"/> section 4.1.5, this would correspond to an HTTPS or DNSSEC resource using integrity protection.</t>

</section>
<section anchor="example-passport-header" title="Example PASSporT header">

<t>An example of the header, would be the following, including the specified passport type, ES256 algorithm, and a URI referencing the network location of the certificate needed to validate the PASSporT signature.</t>

<figure><artwork><![CDATA[
{
    "typ":"passport",
    "alg":"ES256",
    "x5u":"https://cert.example.org/passport.cer"
}
]]></artwork></figure>

</section>
</section>
<section anchor="passport_payload" title="PASSporT Payload">

<t>The token claims consist of the information which needs to be verified at the destination party. These claims follow the definition of a JWT claim <xref target="RFC7519"/> Section 4 and are encoded as defined by the JWS Payload <xref target="RFC7515"/> Section 3.</t>

<t>PASSporT defines the use of a standard JWT defined claim as well as custom claims corresponding to the two parties associated with personal communications, the originator and destination as detailed below.</t>

<t>Any claim names or claim values outside the US-ASCII range should follow the default JSON serialization defined in <xref target="RFC7519"/> Section 7.</t>

<section anchor="jwt-defined-claims" title="JWT defined claims">

<section anchor="iat-issued-at-claim" title="“iat” - Issued At claim">

<t>The JSON claim MUST include the “iat” <xref target="RFC7519"/> Section 4.1.6 defined claim Issued At. As defined the “iat” should be set to the date and time of issuance of the JWT and MUST the origination of the personal communications. The time value should be of the format defined in <xref target="RFC7519"/> Section 2 NumericDate. This is included for securing the token against replay and cut and paste attacks, as explained further in the security considerations in <xref target="security_considerations"/>.</t>

</section>
</section>
<section anchor="passport_claims" title="PASSporT specific claims">

<section anchor="orig_dest" title="Originating and Destination Identity Claims">

<t>The origination and destination identities are represented by two claims that are required for PASSporT, the “orig” and “dest” claims. Both “orig” and “dest” MUST contain claim values that are identity claim JSON objects where the child claim name represents an identity type and the claim value is the identity string, both defined in subsequent subsections. Currently, these identities can be represented as either telephone numbers or Uniform Resource Indicators (URIs).</t>

<t>The “orig” claim is a JSON object with the claim name of “orig” and a claim value which is a JSON object representing the asserted identity of any type (currently either “tn” or “uri”) of the originator of the personal communications signaling.  There MUST be exactly one “orig” claim with exactly one identity claim object in a PASSporT object.</t>

<t>Note, as explained in <xref target="passport_token_overview"/>, the originating identity represents the calling party and may or may not correspond to the authoritative signer of the token.</t>

<t>The “dest” is a JSON object with the claim name of “dest” and MUST have at least have one identity claim object. The”dest” claim value is an array containing one or more identity claim JSON objects representing the destination identities of any type (currently “tn” or “uri”). If the “dest” claim value array contains both “tn” and “uri” claim names, the JSON object should list the “tn” array first and the “uri” array second. Within the “tn” and “uri” arrays, the identity strings should be put in lexicographical order including the scheme-specific portion of the URI characters.</t>

<t>Note, as explained in <xref target="passport_token_overview"/>, the destination identity represents the called party and may or may not correspond to the authoritative party verifying the token signature.</t>

<section anchor="tn-telephone-number-identity" title="“tn” - Telephone Number identity">

<t>If the originating or destination identity is a telephone number, the claim name representing the identity MUST be “tn”.</t>

<t>The claim value for the “tn” claim is the telephone number and MUST be canonicalized according to the procedures specified in <xref target="I-D.ietf-stir-rfc4474bis"/> Section 8.3.</t>

</section>
<section anchor="uri-uri-identity" title="“uri” - URI identity">

<t>If any of the originating or destination identities is of the form URI, as defined in <xref target="RFC3986"/>, the claim name representing the identity MUST be “uri” and the claim value is the URI form of the identity.</t>

</section>
<section anchor="future-identity-forms" title="Future identity forms">

<t>We recognize that in the future there may be other standard mechanisms for representing identities. The “orig” and “dest” claims currently support “tn” and “uri” but could be extended in the future to allow for other identity types with new IANA registered unique types to represent these forms.</t>

</section>
<section anchor="passport_payload_example" title="Examples">

<t>Single originator, with telephone number identity +12155551212, to single destination, with URI identity ‘sip:alice@example.com’, example:</t>

<figure><artwork><![CDATA[
{
    "dest":{"uri":["sip:alice@example.com"]},
    "iat":"1443208345",
    "orig":{"tn":"12155551212"}
}
]]></artwork></figure>

<t>Single originator, with telephone number identity +12155551212, to multiple destination identities, with telephone number identity +12125551212 and two URI identities, sip:alice@example.com and sip:bob@example.com, example:</t>

<figure><artwork><![CDATA[
{
    "dest":{
    "tn":["12125551212"],
        "uri":["sip:alice@example.com",
            "sip:bob@example.net"]
    },
    "iat":"1443208345",
    "orig":{"tn":"12155551212"}
}
]]></artwork></figure>

</section>
</section>
<section anchor="mky" title="“mky” - Media Key claim">

<t>Some protocols that use PASSporT may also want to protect media security keys delivered within their signaling in order to bind those keys to the identities established in the signaling layers. The “mky” is an optional PASSporT claim defining the assertion of media key fingerprints carried in SDP <xref target="RFC4566"/> via the “a=fingerprint” attribute <xref target="RFC4572"/> Section 5. This claim can support either a single or multiple fingerprints appearing in a single SDP body corresponding to one or more media streams offered.
The “mky” claim MUST be formatted in a JSON form including the “alg” and “dig” claims with the corresponding algorithm and hexadecimal values. If there is more than one fingerprint value associated with different media streams in SDP, the fingerprint values MUST be constructed as a JSON array denoted by bracket characters.
For the “dig” claim, the claim value MUST be the hash hexadecimal value without any colons.</t>

<t>The “mky” claim is a JSON object with a claim name of “mky” and a claim value of a JSON array.  The “mky” claim value JSON array MUST contain JSON objects with exactly one of both corresponding “alg” and “dig” claim objects.  The order of the JSON array should be in lexicographic order of the “alg” claims first followed by the corresponding lexicographic order of the “dig” claim values when there is repeated “alg” claims. Within each of the “mky” claim array objects the claim objects MUST have “alg” first and “dig” second.</t>

<t>An example claim with “mky” claim is as follows:</t>

<t>For an SDP offer that includes the following fingerprint values,</t>

<figure><artwork><![CDATA[
a=fingerprint:sha-256 4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:
5D:49:6B:19:E5:7C:AB:3E:4B:65:2E:7D:46:3F:54:42:CD:54:F1
a=fingerprint:sha-256 02:1A:CC:54:27:AB:EB:9C:53:3F:3E:4B:65
:2E:7D:46:3F:54:42:CD:54:F1:7A:03:A2:7D:F9:B0:7F:46:19:B2
]]></artwork></figure>

<t>the PASSporT Payload object would be:</t>

<figure><artwork><![CDATA[
{
    "dest":{"uri":["sip:alice@example.com"]},
    "iat":"1443208345",
    "mky":[
        {
           "alg":"sha-256",
           "dig":"021ACC5427ABEB9C533F3E4B652E7D463F5442CD54
                F17A03A27DF9B07F4619B2"
        },
        {
           "alg":"sha-256",
           "dig":"4AADB9B13F82183B540212DF3E5D496B19E57C
                AB3E4B652E7D463F5442CD54F1"
        }
      ],
    "orig":{"tn":"12155551212"}
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="passport_signature" title="PASSporT Signature">

<t>The signature of the PASSporT is created as specified by JWS <xref target="RFC7515"/> Section 5.1 Steps 1 through 6. PASSporT MUST use the JWS Protected Header. For the JWS Payload and the JWS Protected Header, the lexicographic ordering and white space rules described in <xref target="passport_header"/> and <xref target="passport_payload"/>, and JSON serialization rules in <xref target="json_serialization"/> of this document MUST be followed.</t>

<t>Appendix A of this document has a detailed example of how to follow the steps to create the JWS Signature.</t>

<t>JWS <xref target="RFC7515"/> Section 5.1 Step 7 JWS JSON serialization is not supported for PASSporT.</t>

<t>JWS <xref target="RFC7515"/> Section 5.1 Step 8 describes the method to create the final JWS Compact Serialization form of the PASSporT Token.</t>

</section>
<section anchor="compact_form_of_passport" title="Compact form of PASSporT">

<t>For a using protocol of PASSporT, the PASSporT Claims as well as the PASSporT Header may include redundant or default information that could be reconstructed at the destination based on information provided in the signaling protocol transporting the PASSporT object. In this case, it may be advantageous to have a more compact form of PASSporT to save the transmission of the bytes needed to represent the header and claims.</t>

<t>This specification defines the compact form of the PASSporT token, in the spirit of form defined in <xref target="RFC7515"/> Appendix F, with the use of ‘..’, two periods to represent the header and claim objects being removed, followed by PASSporT signature as defined in <xref target="passport_signature"/>, and the need for the destination to reconstruct the header and claim objects in order to verify the signature.</t>

<t>In order to construct the Compact form of the PASSporT string, the procedure described in <xref target="passport_signature"/> with the exception of Step 8 described in JWS <xref target="RFC7515"/> Section 5.1. This step would be replaced by the following construction of the compact form of PASSporT,
‘..’ || BASE64URL(JWS Signature).</t>

<t>The using protocol of the compact form of PASSporT MUST be accompanied by a specification for how the header and claims objects can be reconstructed from information in the signaling protocol being used.</t>

<t>Note that the full form of the PASSporT token, containing the entire header, payload, and signature, should also use the lexicographic ordering and white space serialization rules, particularly in the case where some using protocols or interworking between protocols may require switching between full and compact forms and maintaining the integrity of the signature.</t>

<section anchor="example-compact-form-passport-token" title="Example Compact form PASSporT Token">

<t>The compact form of the following example token (with line breaks between period used for readability purposes only)</t>

<figure><artwork><![CDATA[
  eyJhbGciOiJFUzI1NiIsInR5cCI6InBhc3Nwb3J0IiwieDV1IjoiaHR0cHM6Ly9j
  ZXJ0LmV4YW1wbGUub3JnL3Bhc3Nwb3J0LmNlciJ9
  .
  eyJkZXN0Ijp7InVyaSI6WyJzaXA6YWxpY2VAZXhhbXBsZS5jb20iXX0sImlhdCI
  6IjE0NDMyMDgzNDUiLCJvcmlnIjp7InRuIjoiMTIxNTU1NTEyMTIifX0
  .
  rq3pjT1hoRwakEGjHCnWSwUnshd0-zJ6F1VOgFWSjHBr8Qjpjlk-cpFYpFYsojN
  CpTzO3QfPOlckGaS6hEck7w
]]></artwork></figure>

<t>would be as follows (with line breaks between period used for readability purposes only)</t>

<figure><artwork><![CDATA[
  ..rq3pjT1hoRwakEGjHCnWSwUnshd0-zJ6F1VOgFWSjHBr8Qjpjlk-cpFYpFYsojN
  CpTzO3QfPOlckGaS6hEck7w
]]></artwork></figure>

</section>
</section>
<section anchor="extending_passport" title="Extending PASSporT">

<t>PASSporT includes the bare minimum set of claims needed to securely assert the originating identity and support the secure properties discussed in various parts of this document. JWT supports a straight forward way to add additional asserted or signed information by simply adding new claims. PASSporT can be extended beyond the defined base set of claims to represent other information requiring assertion or validation beyond the originating identity itself as needed.</t>

<section anchor="ppt" title="“ppt” (PASSporT) header parameter">

<t>Any using protocol can extend the payload of PASSporT with additional JWT claims. JWT claims are managed by an existing IANA registry as defined in <xref target="RFC7519"/> Section 10.1. Implementations of PASSporT MUST support the baseline claims defined in <xref target="passport_claims"/>, and MAY support extended claims. If it is necessary for an extension to PASSporT to require that a relying party support a particular extended claim or set of claims in the PASSporT object, it can do so by specifying a “ppt” element for the PASSporT JOSE header. All values of “ppt” need to be defined in a specification which associates the new value of the “ppt” element with the required claims and behaviors. Relying parties MUST fail to validate PASSporT objects containing an unsupported “ppt”.</t>

<t>Using protocols MUST explicitly define the how each claim is carried in the using protocol and the rules for how the header and payload objects are constructed beyond the lexicographical and serialization rules defined in this document.</t>

<t>Using protocols that carry the compact form of PASSporT, defined in <xref target="compact_form_of_passport"/>, instead of the full form MUST use only mandatory extensions signaled with “ppt” - if a using protocol were to add additional optional claims to a PASSporT object it carried in compact form, relying parties would have no way to reconstruct the token. Moreover, using protocols that support the compact form of PASSporT MUST have some field to signal “ppt” to relying parties, as the compact form of PASSporT omits the JOSE header.</t>

</section>
<section anchor="example-extended-passport-header" title="Example extended PASSporT header">

<t>An example header with a PASSporT extension type of “foo” is as follows:</t>

<figure><artwork><![CDATA[
{
    "alg":"ES256",
    "ppt":"foo",
    "typ":"passport",
    "x5u":"https://tel.example.org/passport.cer"
}
]]></artwork></figure>

</section>
<section anchor="extended-passport-claims" title="Extended PASSporT Claims">

<t>Specifications that define extensions to the PASSporT mechanism MUST explicitly specify what claims they include beyond the base set of claims from this document, the order in which they will appear, and any further information necessary to implement the extension. All extensions MUST include the baseline PASSporT claim elements specified in <xref target="passport_payload"/>; claims may only be appended to the claims object specified; they can never be removed or re-ordered. Specifying new claims follows the baseline JWT procedures (<xref target="RFC7519"/> Section 10.1). Understanding an extension or new claims defined by the extension on the destination verification of the PASSporT token is optional. The creator of a PASSporT object cannot assume that destination systems will understand any given extension. Verification of PASSporT tokens by destination systems that do support an extension may then trigger appropriate application-level behavior in the presence of an extension; authors of extensions should provide appropriate extension-specific guidance to application developers on this point.</t>

<t>An example set of extended claims, extending the first example in <xref target="passport_payload_example"/> using “bar” as the newly defined claim would be as follows:</t>

<figure><artwork><![CDATA[
{
    "bar":"beyond all recognition"
    "dest":{"uri":["sip:alice@example.com"]},
    "iat":"1443208345",
    "orig":{"tn":"12155551212"}
}
]]></artwork></figure>

</section>
</section>
<section anchor="json_serialization" title="Deterministic JSON Serialization">

<t>JSON, as a canonical format, can include spaces and line breaks, and key value pairs can occur in any order. It is therefore a non-deterministic string format. In order to make the digital signature verification work deterministically, the JSON representation of the JWS Protected Header object and JWS Payload object MUST be computed as follows.</t>

<t>The JSON object MUST follow the rules for the construction of the thumbprint of a JSON Web Key (JWK) as defined in <xref target="RFC7638"/> Section 3 Step 1 only. Step 2 should not be performed; as noted in JWK this is still a legal JWK object.</t>

<section anchor="example-passport-deterministic-json-form" title="Example PASSport deterministic JSON form">

<t>This section demonstrate the deterministic JSON serialization for the example PASSporT Payload shown in <xref target="passport_payload_example"/>.</t>

<t>The initial JSON object is shown here:</t>

<figure><artwork><![CDATA[
{
    "dest":{"uri":["sip:alice@example.com"]},
    "orig":{"tn":"12155551212"}
    "iat":"1443208345",
    "mky":[
    {
       "alg":"sha-256",
       "dig":"021ACC5427ABEB9C533F3E4B652E7D463F5442CD54
        F17A03A27DF9B07F4619B2"
    },
    {
       "alg":"sha-256",
       "dig":"4AADB9B13F82183B540212DF3E5D496B19E57C
        AB3E4B652E7D463F5442CD54F1"
    }
  ],
}
]]></artwork></figure>

<t>The parent members of the JSON object are as follows:</t>

<t><list style="symbols">
  <t>“dest”</t>
  <t>“orig”</t>
  <t>“iat”</t>
  <t>“mky”</t>
</list></t>

<t>Their lexicographic order is:</t>

<t><list style="symbols">
  <t>“dest”</t>
  <t>“iat”</t>
  <t>“mky”</t>
  <t>“orig”</t>
</list></t>

<t>The final constructed deterministic JSON serialization representation, with whitespace and line breaks removed, (with line breaks used for display purposes only) is:</t>

<figure><artwork><![CDATA[
{"dest":{"uri":["sip:alice@example.com"],"iat":1443208345,"mky":
[{"alg":"sha-256","dig":"021ACC5427ABEB9C533F3E4B652E7D463F5442CD5
4F17A03A27DF9B07F4619B2"},{"alg":"sha-256","dig":"4AADB9B13F82183B5
40212DF3E5D496B19E57CAB3E4B652E7D463F5442CD54F1"}],
"orig":{"tn":"12155551212"}}
]]></artwork></figure>

</section>
</section>
<section anchor="security_considerations" title="Security Considerations">

<section anchor="avoidance-of-replay-and-cut-and-paste-attacks" title="Avoidance of replay and cut and paste attacks">

<t>There are a number of security considerations for use of the token for avoidance of replay and cut and paste attacks. PASSporT tokens SHOULD only be sent with application level protocol information (e.g. for SIP an INVITE as defined in <xref target="RFC3261"/>) corresponding to the required fields in the token. A uniqueness of the set of token claims and token signature is constructed using the originating identity being asserted with the ‘orig’ claim along with the following two claims:</t>

<t><list style="symbols">
  <t>‘iat’ claim should correspond to a date/time the message was originated. It should also be within a relative  time that is reasonable for clock drift and transmission time characteristics associated with the application using the PASSporT token. Therefore, validation of the token should consider date and time correlation, which could be influenced by signaling protocol specific use and network time differences.</t>
  <t>‘dest’ claim is included to prevent the valid re-use of a previously originated message to send to another destination party.</t>
</list></t>

</section>
<section anchor="solution-considerations" title="Solution Considerations">

<t>The use of PASSporT tokens based on the validation of the digital signature and the associated certificate requires consideration of the authentication and authority or reputation of the signer to attest to the identity being asserted. The following considerations should be recognized when using PASSporT:</t>

<t><list style="symbols">
  <t>The use of this token should not, in it’s own right, be considered a full solution for absolute non-repudiation of the identity being asserted.</t>
  <t>In many applications, the end user represented by the asserted identity represents and signer may not be one in the same. For example, when a service provider signs and validates the token on the behalf of the user consuming the service, the provider MUST have an authenticated and secure relationship with the end user or the device initiating and terminating the communications signaling.</t>
  <t>Applications that use PASSporT should ensure the verification of the signature includes the means of verifying the signer is authoritative through the use of an application or service specific set of common trust anchors for the application.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<section anchor="media-type-registry-contents-additions-requested" title="Media Type Registry Contents Additions Requested">

<t>This section registers the “application/passport” media type <xref target="RFC2046"/> in the “Media Types” registry in the manner described in <xref target="RFC6838"/>, which can be used to indicate that the content is a PASSporT defined JWT and JWS.</t>

<t><list style="symbols">
  <t>Type name: application</t>
  <t>Subtype name: passport</t>
  <t>Required parameters: n/a</t>
  <t>Optional parameters: n/a</t>
  <t>Encoding considerations: 8bit; application/passport values outside the US-ASCII range are encoded using percent encoding as described in Section 2.1 of <xref target="RFC3986"/> (some values may be the empty string), each separated from the next by a single period (‘.’) character.</t>
  <t>Security considerations: See the Security Considerations Section of <xref target="RFC7515"/>.</t>
  <t>Interoperability considerations: n/a</t>
  <t>Published specification: [RFCThis]</t>
  <t>Applications that use this media type: STIR and other applications that require identity related assertion</t>
  <t>Fragment identifier considerations: n/a</t>
  <t>Additional information:  <vspace blankLines='1'/>
Magic number(s): n/a
   File extension(s): n/a
   Macintosh file type code(s): n/a</t>
  <t>Person &amp; email address to contact for further information: Chris Wendt, chris-ietf@chriswendt.net</t>
  <t>Intended usage: COMMON</t>
  <t>Restrictions on usage: none</t>
  <t>Author: Chris Wendt, chris-ietf@chriswendt.net</t>
  <t>Change Controller: IESG</t>
  <t>Provisional registration?  No</t>
</list></t>

</section>
</section>
<section anchor="json-web-token-claims-registration" title="JSON Web Token Claims Registration">

<section anchor="registry-contents-additions-requested" title="Registry Contents Additions Requested">

<t><list style="symbols">
  <t>Claim Name: “orig”</t>
  <t>Claim Description: Originating Identity String</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): <xref target="orig_dest"/> of [RFCThis]</t>
  <t>Claim Name: “dest”</t>
  <t>Claim Description: Destination Identity String</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): <xref target="orig_dest"/> of [RFCThis]</t>
  <t>Claim Name: “mky”</t>
  <t>Claim Description: Media Key Fingerprint String</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): <xref target="mky"/> of [RFCThis]</t>
</list></t>

</section>
</section>
<section anchor="json-web-signature-and-encryption-header-parameter-registry" title="JSON Web Signature and Encryption Header Parameter Registry">

<section anchor="registry-contents-additions-requested-1" title="Registry Contents Additions Requested">

<t>Header Parameter Name: “ppt”</t>

<t><list style="symbols">
  <t>Header Parameter Description: PASSporT extension identifier</t>
  <t>Header Parameter Usage Location(s): JWS</t>
  <t>Change Controller: IESG</t>
  <t>Specification Document(s): <xref target="ppt"/> of [RFCThis]</t>
</list></t>

</section>
</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Particular thanks to members of the ATIS and SIP Forum NNI Task Group including Jim McEchern, Martin Dolly, Richard Shockey, John Barnhill, Christer Holmberg, Victor Pascual Avila, Mary Barnes, Eric Burger for their review, ideas, and contributions also thanks to Henning Schulzrinne, Russ Housley, Alan Johnston, Richard Barnes, Mark Miller, Ted Hardie, Dave Crocker, Robert Sparks for valuable feedback on the technical and security aspects of the document. Additional thanks to Harsha Bellur for assistance in coding the example tokens.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='I-D.ietf-stir-rfc4474bis'>
<front>
<title>Authenticated Identity Management in the Session Initiation Protocol (SIP)</title>

<author initials='J' surname='Peterson' fullname='Jon Peterson'>
    <organization />
</author>

<author initials='C' surname='Jennings' fullname='Cullen Jennings'>
    <organization />
</author>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<author initials='C' surname='Wendt' fullname='Chris Wendt'>
    <organization />
</author>

<date month='September' day='30' year='2016' />

<abstract><t>The baseline security mechanisms in the Session Initiation Protocol (SIP) are inadequate for cryptographically assuring the identity of the end users that originate SIP requests, especially in an interdomain context.  This document defines a mechanism for securely identifying originators of SIP requests.  It does so by defining a SIP header field for conveying a signature used for validating the identity, and for conveying a reference to the credentials of the signer.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-stir-rfc4474bis-13' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-stir-rfc4474bis-13.txt' />
</reference>



<reference  anchor='RFC2046' target='http://www.rfc-editor.org/info/rfc2046'>
<front>
<title>Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='N.' surname='Borenstein' fullname='N. Borenstein'><organization /></author>
<date year='1996' month='November' />
<abstract><t>This second document defines the general structure of the MIME media typing system and defines an initial set of media types.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2046'/>
<seriesInfo name='DOI' value='10.17487/RFC2046'/>
</reference>



<reference  anchor='RFC3986' target='http://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor='RFC4566' target='http://www.rfc-editor.org/info/rfc4566'>
<front>
<title>SDP: Session Description Protocol</title>
<author initials='M.' surname='Handley' fullname='M. Handley'><organization /></author>
<author initials='V.' surname='Jacobson' fullname='V. Jacobson'><organization /></author>
<author initials='C.' surname='Perkins' fullname='C. Perkins'><organization /></author>
<date year='2006' month='July' />
<abstract><t>This memo defines the Session Description Protocol (SDP).  SDP is intended for describing multimedia sessions for the purposes of session announcement, session invitation, and other forms of multimedia session initiation.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4566'/>
<seriesInfo name='DOI' value='10.17487/RFC4566'/>
</reference>



<reference  anchor='RFC4572' target='http://www.rfc-editor.org/info/rfc4572'>
<front>
<title>Connection-Oriented Media Transport over the Transport Layer Security (TLS) Protocol in the Session Description Protocol (SDP)</title>
<author initials='J.' surname='Lennox' fullname='J. Lennox'><organization /></author>
<date year='2006' month='July' />
<abstract><t>This document specifies how to establish secure connection-oriented media transport sessions over the Transport Layer Security (TLS) protocol using the Session Description Protocol (SDP).  It defines a new SDP protocol identifier, 'TCP/TLS'.  It also defines the syntax and semantics for an SDP 'fingerprint' attribute that identifies the certificate that will be presented for the TLS session.  This mechanism allows media transport over TLS connections to be established securely, so long as the integrity of session descriptions is assured.</t><t>This document extends and updates RFC 4145.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4572'/>
<seriesInfo name='DOI' value='10.17487/RFC4572'/>
</reference>



<reference  anchor='RFC6838' target='http://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor='RFC7515' target='http://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference  anchor='RFC7518' target='http://www.rfc-editor.org/info/rfc7518'>
<front>
<title>JSON Web Algorithms (JWA)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification registers cryptographic algorithms and identifiers to be used with the JSON Web Signature (JWS), JSON Web Encryption (JWE), and JSON Web Key (JWK) specifications.  It defines several IANA registries for these identifiers.</t></abstract>
</front>
<seriesInfo name='RFC' value='7518'/>
<seriesInfo name='DOI' value='10.17487/RFC7518'/>
</reference>



<reference  anchor='RFC7519' target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>



<reference  anchor='RFC7638' target='http://www.rfc-editor.org/info/rfc7638'>
<front>
<title>JSON Web Key (JWK) Thumbprint</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This specification defines a method for computing a hash value over a JSON Web Key (JWK).  It defines which fields in a JWK are used in the hash computation, the method of creating a canonical form for those fields, and how to convert the resulting Unicode string into a byte sequence to be hashed.  The resulting hash value can be used for identifying or selecting the key represented by the JWK that is the subject of the thumbprint.</t></abstract>
</front>
<seriesInfo name='RFC' value='7638'/>
<seriesInfo name='DOI' value='10.17487/RFC7638'/>
</reference>



<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor='RFC3261' target='http://www.rfc-editor.org/info/rfc3261'>
<front>
<title>SIP: Session Initiation Protocol</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'><organization /></author>
<author initials='H.' surname='Schulzrinne' fullname='H. Schulzrinne'><organization /></author>
<author initials='G.' surname='Camarillo' fullname='G. Camarillo'><organization /></author>
<author initials='A.' surname='Johnston' fullname='A. Johnston'><organization /></author>
<author initials='J.' surname='Peterson' fullname='J. Peterson'><organization /></author>
<author initials='R.' surname='Sparks' fullname='R. Sparks'><organization /></author>
<author initials='M.' surname='Handley' fullname='M. Handley'><organization /></author>
<author initials='E.' surname='Schooler' fullname='E. Schooler'><organization /></author>
<date year='2002' month='June' />
<abstract><t>This document describes Session Initiation Protocol (SIP), an application-layer control (signaling) protocol for creating, modifying, and terminating sessions with one or more participants.  These sessions include Internet telephone calls, multimedia distribution, and multimedia conferences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3261'/>
<seriesInfo name='DOI' value='10.17487/RFC3261'/>
</reference>



<reference  anchor='RFC5280' target='http://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='D.' surname='Cooper' fullname='D. Cooper'><organization /></author>
<author initials='S.' surname='Santesson' fullname='S. Santesson'><organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='S.' surname='Boeyen' fullname='S. Boeyen'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'><organization /></author>
<date year='2008' month='May' />
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference  anchor='RFC7340' target='http://www.rfc-editor.org/info/rfc7340'>
<front>
<title>Secure Telephone Identity Problem Statement and Requirements</title>
<author initials='J.' surname='Peterson' fullname='J. Peterson'><organization /></author>
<author initials='H.' surname='Schulzrinne' fullname='H. Schulzrinne'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2014' month='September' />
<abstract><t>Over the past decade, Voice over IP (VoIP) systems based on SIP have replaced many traditional telephony deployments.  Interworking VoIP systems with the traditional telephone network has reduced the overall level of calling party number and Caller ID assurances by granting attackers new and inexpensive tools to impersonate or obscure calling party numbers when orchestrating bulk commercial calling schemes, hacking voicemail boxes, or even circumventing multi-factor authentication systems trusted by banks.  Despite previous attempts to provide a secure assurance of the origin of SIP communications, we still lack effective standards for identifying the calling party in a VoIP session.  This document examines the reasons why providing identity for telephone numbers on the Internet has proven so difficult and shows how changes in the last decade may provide us with new strategies for attaching a secure identity to SIP sessions.  It also gives high-level requirements for a solution in this space.</t></abstract>
</front>
<seriesInfo name='RFC' value='7340'/>
<seriesInfo name='DOI' value='10.17487/RFC7340'/>
</reference>




    </references>


<section anchor="example-es256-based-passport-jws-serialization-and-signature" title="Example ES256 based PASSporT JWS Serialization and Signature">

<t>For PASSporT, there will always be a JWS with the following members:</t>

<t><list style="symbols">
  <t>“protected”, with the value BASE64URL(UTF8(JWS Protected Header))</t>
  <t>“payload”, with the value BASE64URL (JWS Payload)</t>
  <t>“signature”, with the value BASE64URL(JWS Signature)</t>
</list></t>

<t>This example will follow the steps in JWS <xref target="RFC7515"/> Section 5.1, steps 1-6 and 8 and incorporates the additional serialization steps required for PASSporT.</t>

<t>Step 1 for JWS references the JWS Payload, an example PASSporT Payload is as follows:</t>

<figure><artwork><![CDATA[
{
    "dest":{"uri":["sip:alice@example.com"]}
    "iat":"1443208345",
    "orig":{"tn":"12155551212"}
}
]]></artwork></figure>

<t>This would be serialized to the form (with line break used for display purposes only):</t>

<figure><artwork><![CDATA[
{"dest":{"uri":["sip:alice@example.com"]},"iat":"1443208345",
"orig":{"tn":"12155551212"}}
]]></artwork></figure>

<t>Step 2 Computes the BASE64URL(JWS Payload) producing this value (with line break used for display purposes only):</t>

<figure><artwork><![CDATA[
eyJkZXN0Ijp7InVyaSI6WyJzaXA6YWxpY2VAZXhhbXBsZS5jb20iXX0sImlhdCI
6IjE0NDMyMDgzNDUiLCJvcmlnIjp7InRuIjoiMTIxNTU1NTEyMTIifX0
]]></artwork></figure>

<t>For Step 3, an example PASSporT Protected Header comprising the JOSE Header is as follows:</t>

<figure><artwork><![CDATA[
{
    "alg":"ES256",
    "typ":"passport",
    "x5u":"https://cert.example.org/passport.cer"
}
]]></artwork></figure>

<t>This would be serialized to the form (with line break used for display purposes only):</t>

<figure><artwork><![CDATA[
{"alg":"ES256","typ":"passport","x5u":"https://cert.example.org
    /passport.cer"}
]]></artwork></figure>

<t>Step 4 Performs the BASE64URL(UTF8(JWS Protected Header)) operation and encoding produces this value (with line break used for display purposes only):</t>

<figure><artwork><![CDATA[
eyJhbGciOiJFUzI1NiIsInR5cCI6InBhc3Nwb3J0IiwieDV1IjoiaHR0cHM6Ly9j
ZXJ0LmV4YW1wbGUub3JnL3Bhc3Nwb3J0LmNlciJ9
]]></artwork></figure>

<t>Step 5 and Step 6 performs the computation of the digital signature of the PASSporT Signing Input
ASCII(BASE64URL(UTF8(JWS Protected Header)) || ‘.’ || BASE64URL(JWS Payload))
using ES256 as the algorithm and the BASE64URL(JWS Signature).</t>

<figure><artwork><![CDATA[
rq3pjT1hoRwakEGjHCnWSwUnshd0-zJ6F1VOgFWSjHBr8Qjpjlk-cpFYpFYsojN
CpTzO3QfPOlckGaS6hEck7w
]]></artwork></figure>

<t>Step 8 describes how to create the final PASSporT token, concatenating the values in the order Header.Payload.Signature with period (‘.’) characters. For the above example values this would produce the following (with line breaks between period used for readability purposes only):</t>

<figure><artwork><![CDATA[
eyJhbGciOiJFUzI1NiIsInR5cCI6InBhc3Nwb3J0IiwieDV1IjoiaHR0cHM6Ly9j
ZXJ0LmV4YW1wbGUub3JnL3Bhc3Nwb3J0LmNlciJ9
.
eyJkZXN0Ijp7InVyaSI6WyJzaXA6YWxpY2VAZXhhbXBsZS5jb20iXX0sImlhdCI
6IjE0NDMyMDgzNDUiLCJvcmlnIjp7InRuIjoiMTIxNTU1NTEyMTIifX0
.
rq3pjT1hoRwakEGjHCnWSwUnshd0-zJ6F1VOgFWSjHBr8Qjpjlk-cpFYpFYsojN
CpTzO3QfPOlckGaS6hEck7w
]]></artwork></figure>

<section anchor="x509-private-key-for-es256-example" title="X.509 Private Key for ES256 Example**">

<figure><artwork><![CDATA[
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIFeZ1R208QCvcu5GuYyMfG4W7sH4m99/7eHSDLpdYllFoAoGCCqGSM49
AwEHoUQDQgAE8HNbQd/TmvCKwPKHkMF9fScavGeH78YTU8qLS8I5HLHSSmlATLcs
lQMhNC/OhlWBYC626nIlo7XeebYS7Sb37g==
-----END EC PRIVATE KEY-----
]]></artwork></figure>

</section>
<section anchor="x509-public-key-for-es256-example" title="X.509 Public Key for ES256 Example**">

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE8HNbQd/TmvCKwPKHkMF9fScavGeH
78YTU8qLS8I5HLHSSmlATLcslQMhNC/OhlWBYC626nIlo7XeebYS7Sb37g==
-----END PUBLIC KEY-----
]]></artwork></figure>

</section>
</section>


  </back>
</rfc>

